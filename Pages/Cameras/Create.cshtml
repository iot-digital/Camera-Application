@page
@model ParkingDemo.Pages.Cameras.CreateModel
@using ParkingDemo.Models
@{
    ViewData["Title"] = "Cameras";
}

<h1 class="display-5">Add Camera</h1>
<hr />
<div class="row">
    <form method="post">
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label asp-for="ViewModel.Name" class="control-label"></label> 
                    <input asp-for="ViewModel.Name" class="form-control" />
                    <span asp-validation-for="ViewModel.Name" class="text-danger form-validation-text"></span>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label asp-for="ViewModel.Index" class="control-label"></label>
                    <input asp-for="ViewModel.Index" class="form-control" />
                    <span asp-validation-for="ViewModel.Index" class="text-danger form-validation-text"></span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label asp-for="ViewModel.DeviceId" class="control-label"></label>
                    <select asp-for="ViewModel.DeviceId" class="form-select"
                            asp-items="@(new SelectList(Model.DevicesList, "Id", "Name", Model.ViewModel.DeviceId))">
                    </select>
                    <span asp-validation-for="ViewModel.DeviceId" class="text-danger form-validation-text"></span>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    <label asp-for="ViewModel.Resolution" class="control-label"></label>
                    <select asp-for="ViewModel.Resolution" class="form-select" asp-items="@Html.GetEnumSelectList<ResolutionType>()">
                    </select>
                    <span asp-validation-for="ViewModel.Resolution" class="text-danger form-validation-text"></span>
                </div>
            </div>
        </div>

        <div id="zonesContainer">
        </div>
        
        <div class="form-group mt-2">
            <input type="submit" value="CREATE" class="btn btn-sm btn-primary" />
            <a asp-page="Index" class="btn btn-sm btn-outline-primary ms-2">BACK TO LIST</a>
            <button type="button" class="btn btn-sm btn-outline-primary ms-2" id="addZone">ADD ZONE</button>

        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial"); 
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let zoneCounter = 1;

            document.getElementById('addZone').addEventListener('click', function () {
                const container = document.getElementById('zonesContainer');

                const zoneDiv = document.createElement('div');
                zoneDiv.id = `zone${zoneCounter}`;
                zoneDiv.className = 'zone'; // Add class here
                zoneDiv.innerHTML = `
                                        <h4>Zone ${zoneCounter}</h4>
                                        <div class="inputs">
                                            <input type="text" name="ViewModel.Zones[${zoneCounter - 1}].Name" placeholder="Zone Name" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].X1" placeholder="X1" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].Y1" placeholder="Y1" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].X2" placeholder="X2" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].Y2" placeholder="Y2" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].X3" placeholder="X3" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].Y3" placeholder="Y3" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].X4" placeholder="X4" />
                                            <input type="number" name="ViewModel.Zones[${zoneCounter - 1}].Y4" placeholder="Y4" />
                                        </div>
                                        <button type="button" class="btn btn-danger btn-sm remove-zone" data-zoneid="zone${zoneCounter}">Remove</button>
                                    `;
                container.appendChild(zoneDiv);

                // Add remove functionality
                zoneDiv.querySelector('.remove-zone').addEventListener('click', function () {
                    const zoneId = this.getAttribute('data-zoneid');
                    document.getElementById(zoneId).remove();
                    resetZoneCount();
                });

                zoneCounter++;
            });

            function resetZoneCount() {
                // Reset the zone counter to 1 after removing a zone
                zoneCounter = 1;
                // Update the zone numbers for the existing zones
                const zones = document.querySelectorAll('.zone');
                zones.forEach((zone, index) => {
                    const zoneNumber = index + 1;
                    zone.id = `zone${zoneNumber}`; // Update zone id
                    zone.querySelector('h4').innerText = `Zone ${zoneNumber}`;
                    const inputs = zone.querySelectorAll('input');
                    inputs.forEach((input, idx) => {
                        const nameAttribute = input.name.split('.');
                        nameAttribute[2] = `Zones[${zoneNumber - 1}]`; // Update name index
                        input.name = nameAttribute.join('.');
                    });
                    zone.querySelector('.remove-zone').setAttribute('data-zoneid', `zone${zoneNumber}`); // Update remove button data-zoneid
                });
            }
        });
    </script>

    <style>
        .zone {
            display: flex;
            flex-direction: column;
            align-items: flex-start; /* Align items to the start of the container */
        }

            .zone .inputs {
                display: flex;
                flex-wrap: wrap;
                gap: 10px;
            }

                .zone .inputs input {
                    width: 100px;
                }

            .zone h4 {
                flex-basis: 100%;
            }

            .zone .remove-zone {
                margin-top: 10px; /* Add margin to separate the button from inputs */
            }
    </style>

}